// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractAOSChallengeManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IAOSChallengeManagerChallenge is an auto generated low-level Go binding around an user-defined struct.
type IAOSChallengeManagerChallenge struct {
	ClockNumber               *big.Int
	AttestationHash           [32]byte
	Signature                 []byte
	ChallengeCreatedBlock     uint32
	QuorumThresholdPercentage uint32
	QuorumNumbers             []byte
}

// IAOSChallengeManagerChallengeResponse is an auto generated low-level Go binding around an user-defined struct.
type IAOSChallengeManagerChallengeResponse struct {
	ReferenceChallengeIndex uint32
	ClockNumber             *big.Int
	AttestationHash         [32]byte
}

// IAOSChallengeManagerChallengeResponseMetadata is an auto generated low-level Go binding around an user-defined struct.
type IAOSChallengeManagerChallengeResponseMetadata struct {
	ChallengeResponsedBlock uint32
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// ContractAOSChallengeManagerMetaData contains all meta data concerning the ContractAOSChallengeManager contract.
var ContractAOSChallengeManagerMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"},{\"name\":\"_challengeResponseWindowBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"CHALLENGE_CHALLENGE_WINDOW_BLOCK\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"CHALLENGE_RESPONSE_WINDOW_BLOCK\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"aggregator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allChallengeHashes\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"allChallengeResponses\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blsApkRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIBLSApkRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"challengeNumber\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"challengeSuccesfullyChallenged\",\"inputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignatures\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"components\":[{\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"createNewChallenge\",\"inputs\":[{\"name\":\"clockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"attestationHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"quorumThresholdPercentage\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getChallengeResponseWindowBlock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_pauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"initialOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_aggregator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"latestChallengeNum\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"pauseAll\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pauserRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIRegistryCoordinator\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"respondToChallenge\",\"inputs\":[{\"name\":\"challenge\",\"type\":\"tuple\",\"internalType\":\"structIAOSChallengeManager.Challenge\",\"components\":[{\"name\":\"clockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"attestationHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"challengeCreatedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumThresholdPercentage\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"challengeResponse\",\"type\":\"tuple\",\"internalType\":\"structIAOSChallengeManager.ChallengeResponse\",\"components\":[{\"name\":\"referenceChallengeIndex\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"clockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"attestationHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"nonSignerStakesAndSignature\",\"type\":\"tuple\",\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"components\":[{\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApks\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"},{\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\",\"internalType\":\"uint32[][]\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setPauserRegistry\",\"inputs\":[{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"internalType\":\"contractIPauserRegistry\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setStaleStakesForbidden\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"stakeRegistry\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStakeRegistry\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"staleStakesForbidden\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"trySignatureAndApkVerification\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"apk\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"pairingSuccessful\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"siganatureIsValid\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"ChallengeResponded\",\"inputs\":[{\"name\":\"challengeResponse\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structIAOSChallengeManager.ChallengeResponse\",\"components\":[{\"name\":\"referenceChallengeIndex\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"clockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"attestationHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"name\":\"challengeResponseMetadata\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structIAOSChallengeManager.ChallengeResponseMetadata\",\"components\":[{\"name\":\"challengeResponsedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewChallengeCreated\",\"inputs\":[{\"name\":\"challengeIndex\",\"type\":\"uint32\",\"indexed\":true,\"internalType\":\"uint32\"},{\"name\":\"challenge\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structIAOSChallengeManager.Challenge\",\"components\":[{\"name\":\"clockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"attestationHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"challengeCreatedBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumThresholdPercentage\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"PauserRegistrySet\",\"inputs\":[{\"name\":\"pauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"},{\"name\":\"newPauserRegistry\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIPauserRegistry\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StaleStakesForbiddenUpdate\",\"inputs\":[{\"name\":\"value\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newPausedStatus\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604051620040cc380380620040cc8339810160408190526200003591620001f7565b81806001600160a01b03166080816001600160a01b031681525050806001600160a01b031663683048356040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200008f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b591906200023e565b6001600160a01b031660a0816001600160a01b031681525050806001600160a01b0316635df459466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200010d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013391906200023e565b6001600160a01b031660c0816001600160a01b03168152505060a0516001600160a01b031663df5cf7236040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200018d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b391906200023e565b6001600160a01b031660e052506097805460ff1916600117905563ffffffff16610100525062000265565b6001600160a01b0381168114620001f457600080fd5b50565b600080604083850312156200020b57600080fd5b82516200021881620001de565b602084015190925063ffffffff811681146200023357600080fd5b809150509250929050565b6000602082840312156200025157600080fd5b81516200025e81620001de565b9392505050565b60805160a05160c05160e05161010051613ddc620002f060003960008181610269015281816102e50152611e950152600081816104aa01526111ae01526000818161038701526113900152600081816103ae0152818161156601526117280152600081816103d50152818161088c01528181610e7901528181611011015261124b0152613ddc6000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636830483511610104578063b62c4e25116100a2578063df5cf72311610071578063df5cf723146104a5578063ea1e004e146104cc578063f2fde38b146104df578063fabc1cbc146104f257600080fd5b8063b62c4e2514610452578063b98d090814610465578063c0c53b8b14610472578063dd44f8351461048557600080fd5b8063715018a6116100de578063715018a614610418578063886f1195146104205780638ae0368b146104335780638da5cb5b1461044157600080fd5b806368304835146103a95780636d14a987146103d05780636efb4636146103f757600080fd5b8063245a7bfc1161017c578063595c6a671161014b578063595c6a671461034f5780635ac86ab7146103575780635c975abb1461037a5780635df459461461038257600080fd5b8063245a7bfc146102b85780632a9648d2146102e35780633781d80614610309578063416c7e5e1461033c57600080fd5b8063171f1d5b116101b8578063171f1d5b1461023a57806319457d78146102645780631cdbf92a146102a05780632245e07f146102a857600080fd5b8063021cb797146101df57806310d67a2f14610212578063136439dd14610227575b600080fd5b6101ff6101ed366004613002565b60ca6020526000908152604090205481565b6040519081526020015b60405180910390f35b610225610220366004613039565b610505565b005b610225610235366004613056565b6105c1565b61024d6102483660046131d4565b610700565b604080519215158352901515602083015201610209565b61028b7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610209565b61028b606481565b60c95461028b9063ffffffff1681565b60cd546102cb906001600160a01b031681565b6040516001600160a01b039091168152602001610209565b7f000000000000000000000000000000000000000000000000000000000000000061028b565b61032c610317366004613002565b60cc6020526000908152604090205460ff1681565b6040519015158152602001610209565b61022561034a366004613233565b61088a565b6102256109ff565b61032c61036536600461325f565b606654600160ff9092169190911b9081161490565b6066546101ff565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b61040a610405366004613566565b610ac6565b604051610209929190613630565b6102256119dd565b6065546102cb906001600160a01b031681565b60c95463ffffffff1661028b565b6033546001600160a01b03166102cb565b610225610460366004613679565b6119f1565b60975461032c9060ff1681565b61022561048036600461370f565b611b59565b6101ff610493366004613002565b60cb6020526000908152604090205481565b6102cb7f000000000000000000000000000000000000000000000000000000000000000081565b6102256104da36600461375a565b611c94565b6102256104ed366004613039565b612122565b610225610500366004613056565b612198565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057c91906137e2565b6001600160a01b0316336001600160a01b0316146105b55760405162461bcd60e51b81526004016105ac906137ff565b60405180910390fd5b6105be816122f4565b50565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610609573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062d9190613849565b6106495760405162461bcd60e51b81526004016105ac90613866565b606654818116146106c25760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016105ac565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000187876000015188602001518860000151600060028110610748576107486138ae565b60200201518951600160200201518a6020015160006002811061076d5761076d6138ae565b60200201518b60200151600160028110610789576107896138ae565b602090810291909101518c518d8301516040516107e69a99989796959401988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b6040516020818303038152906040528051906020012060001c61080991906138c4565b905061087c61082261081b88846123eb565b8690612482565b61082a612516565b6108726108638561085d604080518082018252600080825260209182015281518083019092526001825260029082015290565b906123eb565b61086c8c6125d6565b90612482565b886201d4c0612666565b909890975095505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090c91906137e2565b6001600160a01b0316336001600160a01b0316146109b85760405162461bcd60e51b815260206004820152605c60248201527f424c535369676e6174757265436865636b65722e6f6e6c79436f6f7264696e6160448201527f746f724f776e65723a2063616c6c6572206973206e6f7420746865206f776e6560648201527f72206f6620746865207265676973747279436f6f7264696e61746f7200000000608482015260a4016105ac565b6097805460ff19168215159081179091556040519081527f40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc9060200160405180910390a150565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b9190613849565b610a875760405162461bcd60e51b81526004016105ac90613866565b600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b6040805180820190915260608082526020820152600084610b3d5760405162461bcd60e51b81526020600482015260376024820152600080516020613d8783398151915260448201527f7265733a20656d7074792071756f72756d20696e70757400000000000000000060648201526084016105ac565b60408301515185148015610b55575060a08301515185145b8015610b65575060c08301515185145b8015610b75575060e08301515185145b610bdf5760405162461bcd60e51b81526020600482015260416024820152600080516020613d8783398151915260448201527f7265733a20696e7075742071756f72756d206c656e677468206d69736d6174636064820152600d60fb1b608482015260a4016105ac565b82515160208401515114610c575760405162461bcd60e51b815260206004820152604460248201819052600080516020613d87833981519152908201527f7265733a20696e707574206e6f6e7369676e6572206c656e677468206d69736d6064820152630c2e8c6d60e31b608482015260a4016105ac565b4363ffffffff168463ffffffff1610610cc65760405162461bcd60e51b815260206004820152603c6024820152600080516020613d8783398151915260448201527f7265733a20696e76616c6964207265666572656e636520626c6f636b0000000060648201526084016105ac565b6040805180820182526000808252602080830191909152825180840190935260608084529083015290866001600160401b03811115610d0757610d0761306f565b604051908082528060200260200182016040528015610d30578160200160208202803683370190505b506020820152866001600160401b03811115610d4e57610d4e61306f565b604051908082528060200260200182016040528015610d77578160200160208202803683370190505b50815260408051808201909152606080825260208201528560200151516001600160401b03811115610dab57610dab61306f565b604051908082528060200260200182016040528015610dd4578160200160208202803683370190505b5081526020860151516001600160401b03811115610df457610df461306f565b604051908082528060200260200182016040528015610e1d578160200160208202803683370190505b5081602001819052506000610eef8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051639aa1653d60e01b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169350639aa1653d925060048083019260209291908290030181865afa158015610ec6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eea91906138e6565b61288a565b905060005b87602001515181101561118a57610f3988602001518281518110610f1a57610f1a6138ae565b6020026020010151805160009081526020918201519091526040902090565b83602001518281518110610f4f57610f4f6138ae565b6020908102919091010152801561100f576020830151610f70600183613919565b81518110610f8057610f806138ae565b602002602001015160001c83602001518281518110610fa157610fa16138ae565b602002602001015160001c1161100f576040805162461bcd60e51b8152602060048201526024810191909152600080516020613d8783398151915260448201527f7265733a206e6f6e5369676e65725075626b657973206e6f7420736f7274656460648201526084016105ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166304ec635184602001518381518110611054576110546138ae565b60200260200101518b8b600001518581518110611073576110736138ae565b60200260200101516040518463ffffffff1660e01b81526004016110b09392919092835263ffffffff918216602084015216604082015260600190565b602060405180830381865afa1580156110cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f19190613930565b6001600160c01b031683600001518281518110611110576111106138ae565b60200260200101818152505061117661081b61114a848660000151858151811061113c5761113c6138ae565b60200260200101511661291d565b8a602001518481518110611160576111606138ae565b602002602001015161294890919063ffffffff16565b94508061118281613959565b915050610ef4565b505061119583612a2c565b60975490935060ff166000816111ac57600061122e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c448feb86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190613974565b905060005b8a8110156118ac57821561138e578963ffffffff16827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663249a0c428f8f8681811061128a5761128a6138ae565b60405160e085901b6001600160e01b031916815292013560f81c600483015250602401602060405180830381865afa1580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee9190613974565b6112f8919061398d565b1161138e5760405162461bcd60e51b81526020600482015260666024820152600080516020613d8783398151915260448201527f7265733a205374616b6552656769737472792075706461746573206d7573742060648201527f62652077697468696e207769746864726177616c44656c6179426c6f636b732060848201526577696e646f7760d01b60a482015260c4016105ac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166368bccaac8d8d848181106113cf576113cf6138ae565b9050013560f81c60f81b60f81c8c8c60a0015185815181106113f3576113f36138ae565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa15801561144f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147391906139a5565b6001600160401b0319166114968a604001518381518110610f1a57610f1a6138ae565b67ffffffffffffffff1916146115325760405162461bcd60e51b81526020600482015260616024820152600080516020613d8783398151915260448201527f7265733a2071756f72756d41706b206861736820696e2073746f72616765206460648201527f6f6573206e6f74206d617463682070726f76696465642071756f72756d2061706084820152606b60f81b60a482015260c4016105ac565b6115628960400151828151811061154b5761154b6138ae565b60200260200101518761248290919063ffffffff16565b95507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c8294c568d8d848181106115a5576115a56138ae565b9050013560f81c60f81b60f81c8c8c60c0015185815181106115c9576115c96138ae565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164991906139d0565b8560200151828151811061165f5761165f6138ae565b6001600160601b0390921660209283029190910182015285015180518290811061168b5761168b6138ae565b6020026020010151856000015182815181106116a9576116a96138ae565b60200260200101906001600160601b031690816001600160601b0316815250506000805b8a602001515181101561189757611721866000015182815181106116f3576116f36138ae565b60200260200101518f8f8681811061170d5761170d6138ae565b600192013560f81c9290921c811614919050565b15611885577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f2be94ae8f8f86818110611767576117676138ae565b9050013560f81c60f81b60f81c8e8960200151858151811061178b5761178b6138ae565b60200260200101518f60e0015188815181106117a9576117a96138ae565b602002602001015187815181106117c2576117c26138ae565b60209081029190910101516040516001600160e01b031960e087901b16815260ff909416600485015263ffffffff92831660248501526044840191909152166064820152608401602060405180830381865afa158015611826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184a91906139d0565b875180518590811061185e5761185e6138ae565b6020026020010181815161187291906139f9565b6001600160601b03169052506001909101905b8061188f81613959565b9150506116cd565b505080806118a490613959565b915050611233565b5050506000806118c68c868a606001518b60800151610700565b91509150816119375760405162461bcd60e51b81526020600482015260436024820152600080516020613d8783398151915260448201527f7265733a2070616972696e6720707265636f6d70696c652063616c6c206661696064820152621b195960ea1b608482015260a4016105ac565b806119985760405162461bcd60e51b81526020600482015260396024820152600080516020613d8783398151915260448201527f7265733a207369676e617475726520697320696e76616c69640000000000000060648201526084016105ac565b505060008782602001516040516020016119b3929190613a21565b60408051808303601f190181529190528051602090910120929b929a509198505050505050505050565b6119e5612ac7565b6119ef6000612b21565b565b6040805160c08101825260608183018190526000608083015260a082018190528982524363ffffffff169082015260208082018990528251601f8801829004820281018201909352868352909190879087908190840183828082843760009201919091525050505060408083019190915263ffffffff8516608083015280516020601f850181900481028201810190925283815290849084908190840183828082843760009201919091525050505060a0820152604051611ab6908290602001613ab6565b60408051601f19818403018152828252805160209182012060c9805463ffffffff908116600090815260ca90945293909220555416907ff670ca2cbb898c82f5de5f0697a7340ae1e089df3e85137eb65cc9794b2f190690611b19908490613ab6565b60405180910390a260c954611b359063ffffffff166001613b2c565b60c9805463ffffffff191663ffffffff929092169190911790555050505050505050565b600054610100900460ff1615808015611b795750600054600160ff909116105b80611b935750303b158015611b93575060005460ff166001145b611bf65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ac565b6000805460ff191660011790558015611c19576000805461ff0019166101001790555b611c24846000612b73565b611c2d83612b21565b60cd80546001600160a01b0319166001600160a01b0384161790558015611c8e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60cd546001600160a01b03163314611cee5760405162461bcd60e51b815260206004820152601d60248201527f41676772656761746f72206d757374206265207468652063616c6c657200000060448201526064016105ac565b6000611d006080850160608601613002565b9050366000611d1260a0870187613b54565b90925090506000611d2960a0880160808901613002565b905060ca6000611d3c6020890189613002565b63ffffffff1663ffffffff1681526020019081526020016000205487604051602001611d689190613c08565b6040516020818303038152906040528051906020012014611dfc5760405162461bcd60e51b815260206004820152604260248201527f737570706c696564206368616c6c656e676520646f6573206e6f74206d61746360448201527f6820746865206f6e65207265636f7264656420696e2074686520636f6e74726160648201526118dd60f21b608482015260a4016105ac565b600060cb81611e0e60208a018a613002565b63ffffffff1663ffffffff1681526020019081526020016000205414611e905760405162461bcd60e51b815260206004820152603160248201527f41676772656761746f722068617320616c726561647920726573706f6e64656460448201527020746f20746865206368616c6c656e676560781b60648201526084016105ac565b611eba7f000000000000000000000000000000000000000000000000000000000000000085613b2c565b63ffffffff164363ffffffff161115611f305760405162461bcd60e51b815260206004820152603260248201527f41676772656761746f722068617320726573706f6e64656420746f20746865206044820152716368616c6c656e676520746f6f206c61746560701b60648201526084016105ac565b600086604051602001611f439190613cc6565b604051602081830303815290604052805190602001209050600080611f6b8387878a8c610ac6565b9150915060005b8581101561206a578460ff1683602001518281518110611f9457611f946138ae565b6020026020010151611fa69190613cd4565b6001600160601b0316606484600001518381518110611fc757611fc76138ae565b60200260200101516001600160601b0316611fe29190613d03565b1015612058576040805162461bcd60e51b81526020600482015260248101919091527f5369676e61746f7269657320646f206e6f74206f776e206174206c656173742060448201527f7468726573686f6c642070657263656e74616765206f6620612071756f72756d60648201526084016105ac565b8061206281613959565b915050611f72565b50604080516020808201835263ffffffff4316825291519091612091918c91849101613d22565b6040516020818303038152906040528051906020012060cb60008c60000160208101906120be9190613002565b63ffffffff1663ffffffff168152602001908152602001600020819055507ff7d7a8300e553f25f8088b81b3f77823a57541922aa5fa92ca281944c37ed3d98a8260405161210d929190613d22565b60405180910390a15050505050505050505050565b61212a612ac7565b6001600160a01b03811661218f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ac565b6105be81612b21565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220f91906137e2565b6001600160a01b0316336001600160a01b03161461223f5760405162461bcd60e51b81526004016105ac906137ff565b6066541981196066541916146122bd5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016105ac565b606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c906020016106f5565b6001600160a01b0381166123825760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016105ac565b606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b6040805180820190915260008082526020820152612407612f14565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa905080801561243a5761243c565bfe5b508061247a5760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b60448201526064016105ac565b505092915050565b604080518082019091526000808252602082015261249e612f32565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa905080801561243a57508061247a5760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b60448201526064016105ac565b61251e612f50565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b604080518082019091526000808252602082015260008080612606600080516020613d67833981519152866138c4565b90505b61261281612c5d565b9093509150600080516020613d6783398151915282830983141561264c576040805180820190915290815260208101919091529392505050565b600080516020613d67833981519152600182089050612609565b604080518082018252868152602080820186905282518084019093528683528201849052600091829190612698612f75565b60005b600281101561285d5760006126b1826006613d03565b90508482600281106126c5576126c56138ae565b602002015151836126d783600061398d565b600c81106126e7576126e76138ae565b60200201528482600281106126fe576126fe6138ae565b60200201516020015183826001612715919061398d565b600c8110612725576127256138ae565b602002015283826002811061273c5761273c6138ae565b602002015151518361274f83600261398d565b600c811061275f5761275f6138ae565b6020020152838260028110612776576127766138ae565b602002015151600160200201518361278f83600361398d565b600c811061279f5761279f6138ae565b60200201528382600281106127b6576127b66138ae565b6020020151602001516000600281106127d1576127d16138ae565b6020020151836127e283600461398d565b600c81106127f2576127f26138ae565b6020020152838260028110612809576128096138ae565b602002015160200151600160028110612824576128246138ae565b60200201518361283583600561398d565b600c8110612845576128456138ae565b6020020152508061285581613959565b91505061269b565b50612866612f94565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b60008061289684612cdf565b9050808360ff166001901b116129145760405162461bcd60e51b815260206004820152603f60248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206269746d61702065786365656473206d61782076616c75650060648201526084016105ac565b90505b92915050565b6000805b821561291757612932600184613919565b909216918061294081613d44565b915050612921565b60408051808201909152600080825260208201526102008261ffff16106129a45760405162461bcd60e51b815260206004820152601060248201526f7363616c61722d746f6f2d6c6172676560801b60448201526064016105ac565b8161ffff16600114156129b8575081612917565b6040805180820190915260008082526020820181905284906001905b8161ffff168661ffff1610612a2157600161ffff871660ff83161c81161415612a0457612a018484612482565b93505b612a0e8384612482565b92506201fffe600192831b1691016129d4565b509195945050505050565b60408051808201909152600080825260208201528151158015612a5157506020820151155b15612a6f575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020613d678339815191528460200151612aa291906138c4565b612aba90600080516020613d67833981519152613919565b905292915050565b919050565b6033546001600160a01b031633146119ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105ac565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6065546001600160a01b0316158015612b9457506001600160a01b03821615155b612c165760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a4016105ac565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2612c59826122f4565b5050565b60008080600080516020613d678339815191526003600080516020613d6783398151915286600080516020613d67833981519152888909090890506000612cd3827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52600080516020613d67833981519152612e6c565b91959194509092505050565b600061010082511115612d685760405162461bcd60e51b8152602060048201526044602482018190527f4269746d61705574696c732e6f72646572656442797465734172726179546f42908201527f69746d61703a206f7264657265644279746573417272617920697320746f6f206064820152636c6f6e6760e01b608482015260a4016105ac565b8151612d7657506000919050565b60008083600081518110612d8c57612d8c6138ae565b0160200151600160f89190911c81901b92505b8451811015612e6357848181518110612dba57612dba6138ae565b0160200151600160f89190911c1b9150828211612e4f5760405162461bcd60e51b815260206004820152604760248201527f4269746d61705574696c732e6f72646572656442797465734172726179546f4260448201527f69746d61703a206f72646572656442797465734172726179206973206e6f74206064820152661bdc99195c995960ca1b608482015260a4016105ac565b91811791612e5c81613959565b9050612d9f565b50909392505050565b600080612e77612f94565b612e7f612fb2565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa925082801561243a575082612f095760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c75726500000000000060448201526064016105ac565b505195945050505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280612f63612fd0565b8152602001612f70612fd0565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b803563ffffffff81168114612ac257600080fd5b60006020828403121561301457600080fd5b61301d82612fee565b9392505050565b6001600160a01b03811681146105be57600080fd5b60006020828403121561304b57600080fd5b813561291481613024565b60006020828403121561306857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156130a7576130a761306f565b60405290565b60405161010081016001600160401b03811182821017156130a7576130a761306f565b604051601f8201601f191681016001600160401b03811182821017156130f8576130f861306f565b604052919050565b60006040828403121561311257600080fd5b61311a613085565b9050813581526020820135602082015292915050565b600082601f83011261314157600080fd5b604051604081018181106001600160401b03821117156131635761316361306f565b806040525080604084018581111561317a57600080fd5b845b81811015612a2157803583526020928301920161317c565b6000608082840312156131a657600080fd5b6131ae613085565b90506131ba8383613130565b81526131c98360408401613130565b602082015292915050565b60008060008061012085870312156131eb57600080fd5b843593506131fc8660208701613100565b925061320b8660608701613194565b915061321a8660e08701613100565b905092959194509250565b80151581146105be57600080fd5b60006020828403121561324557600080fd5b813561291481613225565b60ff811681146105be57600080fd5b60006020828403121561327157600080fd5b813561291481613250565b60008083601f84011261328e57600080fd5b5081356001600160401b038111156132a557600080fd5b6020830191508360208285010111156132bd57600080fd5b9250929050565b60006001600160401b038211156132dd576132dd61306f565b5060051b60200190565b600082601f8301126132f857600080fd5b8135602061330d613308836132c4565b6130d0565b82815260059290921b8401810191818101908684111561332c57600080fd5b8286015b8481101561334e5761334181612fee565b8352918301918301613330565b509695505050505050565b600082601f83011261336a57600080fd5b8135602061337a613308836132c4565b82815260069290921b8401810191818101908684111561339957600080fd5b8286015b8481101561334e576133af8882613100565b83529183019160400161339d565b600082601f8301126133ce57600080fd5b813560206133de613308836132c4565b82815260059290921b840181019181810190868411156133fd57600080fd5b8286015b8481101561334e5780356001600160401b038111156134205760008081fd5b61342e8986838b01016132e7565b845250918301918301613401565b6000610180828403121561344f57600080fd5b6134576130ad565b905081356001600160401b038082111561347057600080fd5b61347c858386016132e7565b8352602084013591508082111561349257600080fd5b61349e85838601613359565b602084015260408401359150808211156134b757600080fd5b6134c385838601613359565b60408401526134d58560608601613194565b60608401526134e78560e08601613100565b608084015261012084013591508082111561350157600080fd5b61350d858386016132e7565b60a084015261014084013591508082111561352757600080fd5b613533858386016132e7565b60c084015261016084013591508082111561354d57600080fd5b5061355a848285016133bd565b60e08301525092915050565b60008060008060006080868803121561357e57600080fd5b8535945060208601356001600160401b038082111561359c57600080fd5b6135a889838a0161327c565b90965094508491506135bc60408901612fee565b935060608801359150808211156135d257600080fd5b506135df8882890161343c565b9150509295509295909350565b600081518084526020808501945080840160005b838110156136255781516001600160601b031687529582019590820190600101613600565b509495945050505050565b604081526000835160408084015261364b60808401826135ec565b90506020850151603f1984830301606085015261366882826135ec565b925050508260208301529392505050565b600080600080600080600060a0888a03121561369457600080fd5b873596506020880135955060408801356001600160401b03808211156136b957600080fd5b6136c58b838c0161327c565b90975095508591506136d960608b01612fee565b945060808a01359150808211156136ef57600080fd5b506136fc8a828b0161327c565b989b979a50959850939692959293505050565b60008060006060848603121561372457600080fd5b833561372f81613024565b9250602084013561373f81613024565b9150604084013561374f81613024565b809150509250925092565b600080600083850360a081121561377057600080fd5b84356001600160401b038082111561378757600080fd5b9086019060c0828903121561379b57600080fd5b8195506060601f19840112156137b057600080fd5b60208701945060808701359250808311156137ca57600080fd5b50506137d88682870161343c565b9150509250925092565b6000602082840312156137f457600080fd5b815161291481613024565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561385b57600080fd5b815161291481613225565b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000826138e157634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156138f857600080fd5b815161291481613250565b634e487b7160e01b600052601160045260246000fd5b60008282101561392b5761392b613903565b500390565b60006020828403121561394257600080fd5b81516001600160c01b038116811461291457600080fd5b600060001982141561396d5761396d613903565b5060010190565b60006020828403121561398657600080fd5b5051919050565b600082198211156139a0576139a0613903565b500190565b6000602082840312156139b757600080fd5b815167ffffffffffffffff198116811461291457600080fd5b6000602082840312156139e257600080fd5b81516001600160601b038116811461291457600080fd5b60006001600160601b0383811690831681811015613a1957613a19613903565b039392505050565b63ffffffff60e01b8360e01b1681526000600482018351602080860160005b83811015613a5c57815185529382019390820190600101613a40565b5092979650505050505050565b6000815180845260005b81811015613a8f57602081850181015186830182015201613a73565b81811115613aa1576000602083870101525b50601f01601f19169290920160200192915050565b6020815281516020820152602082015160408201526000604083015160c06060840152613ae660e0840182613a69565b9050606084015163ffffffff80821660808601528060808701511660a0860152505060a0840151601f198483030160c0850152613b238282613a69565b95945050505050565b600063ffffffff808316818516808303821115613b4b57613b4b613903565b01949350505050565b6000808335601e19843603018112613b6b57600080fd5b8301803591506001600160401b03821115613b8557600080fd5b6020019150368190038213156132bd57600080fd5b6000808335601e19843603018112613bb157600080fd5b83016020810192503590506001600160401b03811115613bd057600080fd5b8036038313156132bd57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815281356020820152602082013560408201526000613c2c6040840184613b9a565b60c06060850152613c4160e085018284613bdf565b915050613c5060608501612fee565b63ffffffff808216608086015280613c6a60808801612fee565b1660a08601525050613c7f60a0850185613b9a565b848303601f190160c0860152613c96838284613bdf565b9695505050505050565b63ffffffff613cae82612fee565b16825260208181013590830152604090810135910152565b606081016129178284613ca0565b60006001600160601b0380831681851681830481118215151615613cfa57613cfa613903565b02949350505050565b6000816000190483118215151615613d1d57613d1d613903565b500290565b60808101613d308285613ca0565b63ffffffff83511660608301529392505050565b600061ffff80831681811415613d5c57613d5c613903565b600101939250505056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47424c535369676e6174757265436865636b65722e636865636b5369676e617475a2646970667358221220c00fef4deb6013d142523995a90f70d93d0d32fb62fca90f1c74431e1844885a64736f6c634300080c0033",
}

// ContractAOSChallengeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractAOSChallengeManagerMetaData.ABI instead.
var ContractAOSChallengeManagerABI = ContractAOSChallengeManagerMetaData.ABI

// ContractAOSChallengeManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractAOSChallengeManagerMetaData.Bin instead.
var ContractAOSChallengeManagerBin = ContractAOSChallengeManagerMetaData.Bin

// DeployContractAOSChallengeManager deploys a new Ethereum contract, binding an instance of ContractAOSChallengeManager to it.
func DeployContractAOSChallengeManager(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address, _challengeResponseWindowBlock uint32) (common.Address, *types.Transaction, *ContractAOSChallengeManager, error) {
	parsed, err := ContractAOSChallengeManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractAOSChallengeManagerBin), backend, _registryCoordinator, _challengeResponseWindowBlock)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractAOSChallengeManager{ContractAOSChallengeManagerCaller: ContractAOSChallengeManagerCaller{contract: contract}, ContractAOSChallengeManagerTransactor: ContractAOSChallengeManagerTransactor{contract: contract}, ContractAOSChallengeManagerFilterer: ContractAOSChallengeManagerFilterer{contract: contract}}, nil
}

// ContractAOSChallengeManager is an auto generated Go binding around an Ethereum contract.
type ContractAOSChallengeManager struct {
	ContractAOSChallengeManagerCaller     // Read-only binding to the contract
	ContractAOSChallengeManagerTransactor // Write-only binding to the contract
	ContractAOSChallengeManagerFilterer   // Log filterer for contract events
}

// ContractAOSChallengeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractAOSChallengeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractAOSChallengeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractAOSChallengeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractAOSChallengeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractAOSChallengeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractAOSChallengeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractAOSChallengeManagerSession struct {
	Contract     *ContractAOSChallengeManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                // Call options to use throughout this session
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ContractAOSChallengeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractAOSChallengeManagerCallerSession struct {
	Contract *ContractAOSChallengeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                      // Call options to use throughout this session
}

// ContractAOSChallengeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractAOSChallengeManagerTransactorSession struct {
	Contract     *ContractAOSChallengeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                      // Transaction auth options to use throughout this session
}

// ContractAOSChallengeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractAOSChallengeManagerRaw struct {
	Contract *ContractAOSChallengeManager // Generic contract binding to access the raw methods on
}

// ContractAOSChallengeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractAOSChallengeManagerCallerRaw struct {
	Contract *ContractAOSChallengeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractAOSChallengeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractAOSChallengeManagerTransactorRaw struct {
	Contract *ContractAOSChallengeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractAOSChallengeManager creates a new instance of ContractAOSChallengeManager, bound to a specific deployed contract.
func NewContractAOSChallengeManager(address common.Address, backend bind.ContractBackend) (*ContractAOSChallengeManager, error) {
	contract, err := bindContractAOSChallengeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManager{ContractAOSChallengeManagerCaller: ContractAOSChallengeManagerCaller{contract: contract}, ContractAOSChallengeManagerTransactor: ContractAOSChallengeManagerTransactor{contract: contract}, ContractAOSChallengeManagerFilterer: ContractAOSChallengeManagerFilterer{contract: contract}}, nil
}

// NewContractAOSChallengeManagerCaller creates a new read-only instance of ContractAOSChallengeManager, bound to a specific deployed contract.
func NewContractAOSChallengeManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractAOSChallengeManagerCaller, error) {
	contract, err := bindContractAOSChallengeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerCaller{contract: contract}, nil
}

// NewContractAOSChallengeManagerTransactor creates a new write-only instance of ContractAOSChallengeManager, bound to a specific deployed contract.
func NewContractAOSChallengeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractAOSChallengeManagerTransactor, error) {
	contract, err := bindContractAOSChallengeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerTransactor{contract: contract}, nil
}

// NewContractAOSChallengeManagerFilterer creates a new log filterer instance of ContractAOSChallengeManager, bound to a specific deployed contract.
func NewContractAOSChallengeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractAOSChallengeManagerFilterer, error) {
	contract, err := bindContractAOSChallengeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerFilterer{contract: contract}, nil
}

// bindContractAOSChallengeManager binds a generic wrapper to an already deployed contract.
func bindContractAOSChallengeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractAOSChallengeManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractAOSChallengeManager.Contract.ContractAOSChallengeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.ContractAOSChallengeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.ContractAOSChallengeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractAOSChallengeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.contract.Transact(opts, method, params...)
}

// CHALLENGECHALLENGEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1cdbf92a.
//
// Solidity: function CHALLENGE_CHALLENGE_WINDOW_BLOCK() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) CHALLENGECHALLENGEWINDOWBLOCK(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "CHALLENGE_CHALLENGE_WINDOW_BLOCK")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CHALLENGECHALLENGEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1cdbf92a.
//
// Solidity: function CHALLENGE_CHALLENGE_WINDOW_BLOCK() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) CHALLENGECHALLENGEWINDOWBLOCK() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.CHALLENGECHALLENGEWINDOWBLOCK(&_ContractAOSChallengeManager.CallOpts)
}

// CHALLENGECHALLENGEWINDOWBLOCK is a free data retrieval call binding the contract method 0x1cdbf92a.
//
// Solidity: function CHALLENGE_CHALLENGE_WINDOW_BLOCK() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) CHALLENGECHALLENGEWINDOWBLOCK() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.CHALLENGECHALLENGEWINDOWBLOCK(&_ContractAOSChallengeManager.CallOpts)
}

// CHALLENGERESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x19457d78.
//
// Solidity: function CHALLENGE_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) CHALLENGERESPONSEWINDOWBLOCK(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "CHALLENGE_RESPONSE_WINDOW_BLOCK")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// CHALLENGERESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x19457d78.
//
// Solidity: function CHALLENGE_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) CHALLENGERESPONSEWINDOWBLOCK() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.CHALLENGERESPONSEWINDOWBLOCK(&_ContractAOSChallengeManager.CallOpts)
}

// CHALLENGERESPONSEWINDOWBLOCK is a free data retrieval call binding the contract method 0x19457d78.
//
// Solidity: function CHALLENGE_RESPONSE_WINDOW_BLOCK() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) CHALLENGERESPONSEWINDOWBLOCK() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.CHALLENGERESPONSEWINDOWBLOCK(&_ContractAOSChallengeManager.CallOpts)
}

// Aggregator is a free data retrieval call binding the contract method 0x245a7bfc.
//
// Solidity: function aggregator() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) Aggregator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "aggregator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Aggregator is a free data retrieval call binding the contract method 0x245a7bfc.
//
// Solidity: function aggregator() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Aggregator() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.Aggregator(&_ContractAOSChallengeManager.CallOpts)
}

// Aggregator is a free data retrieval call binding the contract method 0x245a7bfc.
//
// Solidity: function aggregator() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) Aggregator() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.Aggregator(&_ContractAOSChallengeManager.CallOpts)
}

// AllChallengeHashes is a free data retrieval call binding the contract method 0x021cb797.
//
// Solidity: function allChallengeHashes(uint32 ) view returns(bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) AllChallengeHashes(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "allChallengeHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AllChallengeHashes is a free data retrieval call binding the contract method 0x021cb797.
//
// Solidity: function allChallengeHashes(uint32 ) view returns(bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) AllChallengeHashes(arg0 uint32) ([32]byte, error) {
	return _ContractAOSChallengeManager.Contract.AllChallengeHashes(&_ContractAOSChallengeManager.CallOpts, arg0)
}

// AllChallengeHashes is a free data retrieval call binding the contract method 0x021cb797.
//
// Solidity: function allChallengeHashes(uint32 ) view returns(bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) AllChallengeHashes(arg0 uint32) ([32]byte, error) {
	return _ContractAOSChallengeManager.Contract.AllChallengeHashes(&_ContractAOSChallengeManager.CallOpts, arg0)
}

// AllChallengeResponses is a free data retrieval call binding the contract method 0xdd44f835.
//
// Solidity: function allChallengeResponses(uint32 ) view returns(bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) AllChallengeResponses(opts *bind.CallOpts, arg0 uint32) ([32]byte, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "allChallengeResponses", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// AllChallengeResponses is a free data retrieval call binding the contract method 0xdd44f835.
//
// Solidity: function allChallengeResponses(uint32 ) view returns(bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) AllChallengeResponses(arg0 uint32) ([32]byte, error) {
	return _ContractAOSChallengeManager.Contract.AllChallengeResponses(&_ContractAOSChallengeManager.CallOpts, arg0)
}

// AllChallengeResponses is a free data retrieval call binding the contract method 0xdd44f835.
//
// Solidity: function allChallengeResponses(uint32 ) view returns(bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) AllChallengeResponses(arg0 uint32) ([32]byte, error) {
	return _ContractAOSChallengeManager.Contract.AllChallengeResponses(&_ContractAOSChallengeManager.CallOpts, arg0)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) BlsApkRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "blsApkRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.BlsApkRegistry(&_ContractAOSChallengeManager.CallOpts)
}

// BlsApkRegistry is a free data retrieval call binding the contract method 0x5df45946.
//
// Solidity: function blsApkRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) BlsApkRegistry() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.BlsApkRegistry(&_ContractAOSChallengeManager.CallOpts)
}

// ChallengeNumber is a free data retrieval call binding the contract method 0x8ae0368b.
//
// Solidity: function challengeNumber() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) ChallengeNumber(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "challengeNumber")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// ChallengeNumber is a free data retrieval call binding the contract method 0x8ae0368b.
//
// Solidity: function challengeNumber() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) ChallengeNumber() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.ChallengeNumber(&_ContractAOSChallengeManager.CallOpts)
}

// ChallengeNumber is a free data retrieval call binding the contract method 0x8ae0368b.
//
// Solidity: function challengeNumber() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) ChallengeNumber() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.ChallengeNumber(&_ContractAOSChallengeManager.CallOpts)
}

// ChallengeSuccesfullyChallenged is a free data retrieval call binding the contract method 0x3781d806.
//
// Solidity: function challengeSuccesfullyChallenged(uint32 ) view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) ChallengeSuccesfullyChallenged(opts *bind.CallOpts, arg0 uint32) (bool, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "challengeSuccesfullyChallenged", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ChallengeSuccesfullyChallenged is a free data retrieval call binding the contract method 0x3781d806.
//
// Solidity: function challengeSuccesfullyChallenged(uint32 ) view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) ChallengeSuccesfullyChallenged(arg0 uint32) (bool, error) {
	return _ContractAOSChallengeManager.Contract.ChallengeSuccesfullyChallenged(&_ContractAOSChallengeManager.CallOpts, arg0)
}

// ChallengeSuccesfullyChallenged is a free data retrieval call binding the contract method 0x3781d806.
//
// Solidity: function challengeSuccesfullyChallenged(uint32 ) view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) ChallengeSuccesfullyChallenged(arg0 uint32) (bool, error) {
	return _ContractAOSChallengeManager.Contract.ChallengeSuccesfullyChallenged(&_ContractAOSChallengeManager.CallOpts, arg0)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, params)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractAOSChallengeManager.Contract.CheckSignatures(&_ContractAOSChallengeManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) params) view returns((uint96[],uint96[]), bytes32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, params IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractAOSChallengeManager.Contract.CheckSignatures(&_ContractAOSChallengeManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, params)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Delegation() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.Delegation(&_ContractAOSChallengeManager.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) Delegation() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.Delegation(&_ContractAOSChallengeManager.CallOpts)
}

// GetChallengeResponseWindowBlock is a free data retrieval call binding the contract method 0x2a9648d2.
//
// Solidity: function getChallengeResponseWindowBlock() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) GetChallengeResponseWindowBlock(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "getChallengeResponseWindowBlock")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetChallengeResponseWindowBlock is a free data retrieval call binding the contract method 0x2a9648d2.
//
// Solidity: function getChallengeResponseWindowBlock() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) GetChallengeResponseWindowBlock() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.GetChallengeResponseWindowBlock(&_ContractAOSChallengeManager.CallOpts)
}

// GetChallengeResponseWindowBlock is a free data retrieval call binding the contract method 0x2a9648d2.
//
// Solidity: function getChallengeResponseWindowBlock() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) GetChallengeResponseWindowBlock() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.GetChallengeResponseWindowBlock(&_ContractAOSChallengeManager.CallOpts)
}

// LatestChallengeNum is a free data retrieval call binding the contract method 0x2245e07f.
//
// Solidity: function latestChallengeNum() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) LatestChallengeNum(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "latestChallengeNum")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// LatestChallengeNum is a free data retrieval call binding the contract method 0x2245e07f.
//
// Solidity: function latestChallengeNum() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) LatestChallengeNum() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.LatestChallengeNum(&_ContractAOSChallengeManager.CallOpts)
}

// LatestChallengeNum is a free data retrieval call binding the contract method 0x2245e07f.
//
// Solidity: function latestChallengeNum() view returns(uint32)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) LatestChallengeNum() (uint32, error) {
	return _ContractAOSChallengeManager.Contract.LatestChallengeNum(&_ContractAOSChallengeManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Owner() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.Owner(&_ContractAOSChallengeManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) Owner() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.Owner(&_ContractAOSChallengeManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Paused(index uint8) (bool, error) {
	return _ContractAOSChallengeManager.Contract.Paused(&_ContractAOSChallengeManager.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) Paused(index uint8) (bool, error) {
	return _ContractAOSChallengeManager.Contract.Paused(&_ContractAOSChallengeManager.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Paused0() (*big.Int, error) {
	return _ContractAOSChallengeManager.Contract.Paused0(&_ContractAOSChallengeManager.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) Paused0() (*big.Int, error) {
	return _ContractAOSChallengeManager.Contract.Paused0(&_ContractAOSChallengeManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) PauserRegistry() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.PauserRegistry(&_ContractAOSChallengeManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.PauserRegistry(&_ContractAOSChallengeManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.RegistryCoordinator(&_ContractAOSChallengeManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.RegistryCoordinator(&_ContractAOSChallengeManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.StakeRegistry(&_ContractAOSChallengeManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractAOSChallengeManager.Contract.StakeRegistry(&_ContractAOSChallengeManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) StaleStakesForbidden(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "staleStakesForbidden")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) StaleStakesForbidden() (bool, error) {
	return _ContractAOSChallengeManager.Contract.StaleStakesForbidden(&_ContractAOSChallengeManager.CallOpts)
}

// StaleStakesForbidden is a free data retrieval call binding the contract method 0xb98d0908.
//
// Solidity: function staleStakesForbidden() view returns(bool)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) StaleStakesForbidden() (bool, error) {
	return _ContractAOSChallengeManager.Contract.StaleStakesForbidden(&_ContractAOSChallengeManager.CallOpts)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractAOSChallengeManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractAOSChallengeManager.Contract.TrySignatureAndApkVerification(&_ContractAOSChallengeManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractAOSChallengeManager.Contract.TrySignatureAndApkVerification(&_ContractAOSChallengeManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// CreateNewChallenge is a paid mutator transaction binding the contract method 0xb62c4e25.
//
// Solidity: function createNewChallenge(uint256 clockNumber, bytes32 attestationHash, bytes signature, uint32 quorumThresholdPercentage, bytes quorumNumbers) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) CreateNewChallenge(opts *bind.TransactOpts, clockNumber *big.Int, attestationHash [32]byte, signature []byte, quorumThresholdPercentage uint32, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "createNewChallenge", clockNumber, attestationHash, signature, quorumThresholdPercentage, quorumNumbers)
}

// CreateNewChallenge is a paid mutator transaction binding the contract method 0xb62c4e25.
//
// Solidity: function createNewChallenge(uint256 clockNumber, bytes32 attestationHash, bytes signature, uint32 quorumThresholdPercentage, bytes quorumNumbers) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) CreateNewChallenge(clockNumber *big.Int, attestationHash [32]byte, signature []byte, quorumThresholdPercentage uint32, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.CreateNewChallenge(&_ContractAOSChallengeManager.TransactOpts, clockNumber, attestationHash, signature, quorumThresholdPercentage, quorumNumbers)
}

// CreateNewChallenge is a paid mutator transaction binding the contract method 0xb62c4e25.
//
// Solidity: function createNewChallenge(uint256 clockNumber, bytes32 attestationHash, bytes signature, uint32 quorumThresholdPercentage, bytes quorumNumbers) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) CreateNewChallenge(clockNumber *big.Int, attestationHash [32]byte, signature []byte, quorumThresholdPercentage uint32, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.CreateNewChallenge(&_ContractAOSChallengeManager.TransactOpts, clockNumber, attestationHash, signature, quorumThresholdPercentage, quorumNumbers)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner, address _aggregator) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) Initialize(opts *bind.TransactOpts, _pauserRegistry common.Address, initialOwner common.Address, _aggregator common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "initialize", _pauserRegistry, initialOwner, _aggregator)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner, address _aggregator) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Initialize(_pauserRegistry common.Address, initialOwner common.Address, _aggregator common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.Initialize(&_ContractAOSChallengeManager.TransactOpts, _pauserRegistry, initialOwner, _aggregator)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner, address _aggregator) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) Initialize(_pauserRegistry common.Address, initialOwner common.Address, _aggregator common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.Initialize(&_ContractAOSChallengeManager.TransactOpts, _pauserRegistry, initialOwner, _aggregator)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.Pause(&_ContractAOSChallengeManager.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.Pause(&_ContractAOSChallengeManager.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) PauseAll() (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.PauseAll(&_ContractAOSChallengeManager.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.PauseAll(&_ContractAOSChallengeManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.RenounceOwnership(&_ContractAOSChallengeManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.RenounceOwnership(&_ContractAOSChallengeManager.TransactOpts)
}

// RespondToChallenge is a paid mutator transaction binding the contract method 0xea1e004e.
//
// Solidity: function respondToChallenge((uint256,bytes32,bytes,uint32,uint32,bytes) challenge, (uint32,uint256,bytes32) challengeResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) RespondToChallenge(opts *bind.TransactOpts, challenge IAOSChallengeManagerChallenge, challengeResponse IAOSChallengeManagerChallengeResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "respondToChallenge", challenge, challengeResponse, nonSignerStakesAndSignature)
}

// RespondToChallenge is a paid mutator transaction binding the contract method 0xea1e004e.
//
// Solidity: function respondToChallenge((uint256,bytes32,bytes,uint32,uint32,bytes) challenge, (uint32,uint256,bytes32) challengeResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) RespondToChallenge(challenge IAOSChallengeManagerChallenge, challengeResponse IAOSChallengeManagerChallengeResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.RespondToChallenge(&_ContractAOSChallengeManager.TransactOpts, challenge, challengeResponse, nonSignerStakesAndSignature)
}

// RespondToChallenge is a paid mutator transaction binding the contract method 0xea1e004e.
//
// Solidity: function respondToChallenge((uint256,bytes32,bytes,uint32,uint32,bytes) challenge, (uint32,uint256,bytes32) challengeResponse, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) RespondToChallenge(challenge IAOSChallengeManagerChallenge, challengeResponse IAOSChallengeManagerChallengeResponse, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.RespondToChallenge(&_ContractAOSChallengeManager.TransactOpts, challenge, challengeResponse, nonSignerStakesAndSignature)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.SetPauserRegistry(&_ContractAOSChallengeManager.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.SetPauserRegistry(&_ContractAOSChallengeManager.TransactOpts, newPauserRegistry)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) SetStaleStakesForbidden(opts *bind.TransactOpts, value bool) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "setStaleStakesForbidden", value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.SetStaleStakesForbidden(&_ContractAOSChallengeManager.TransactOpts, value)
}

// SetStaleStakesForbidden is a paid mutator transaction binding the contract method 0x416c7e5e.
//
// Solidity: function setStaleStakesForbidden(bool value) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) SetStaleStakesForbidden(value bool) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.SetStaleStakesForbidden(&_ContractAOSChallengeManager.TransactOpts, value)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.TransferOwnership(&_ContractAOSChallengeManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.TransferOwnership(&_ContractAOSChallengeManager.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.Unpause(&_ContractAOSChallengeManager.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractAOSChallengeManager.Contract.Unpause(&_ContractAOSChallengeManager.TransactOpts, newPausedStatus)
}

// ContractAOSChallengeManagerChallengeRespondedIterator is returned from FilterChallengeResponded and is used to iterate over the raw logs and unpacked data for ChallengeResponded events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerChallengeRespondedIterator struct {
	Event *ContractAOSChallengeManagerChallengeResponded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerChallengeRespondedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerChallengeResponded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerChallengeResponded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerChallengeRespondedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerChallengeRespondedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerChallengeResponded represents a ChallengeResponded event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerChallengeResponded struct {
	ChallengeResponse         IAOSChallengeManagerChallengeResponse
	ChallengeResponseMetadata IAOSChallengeManagerChallengeResponseMetadata
	Raw                       types.Log // Blockchain specific contextual infos
}

// FilterChallengeResponded is a free log retrieval operation binding the contract event 0xf7d7a8300e553f25f8088b81b3f77823a57541922aa5fa92ca281944c37ed3d9.
//
// Solidity: event ChallengeResponded((uint32,uint256,bytes32) challengeResponse, (uint32) challengeResponseMetadata)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterChallengeResponded(opts *bind.FilterOpts) (*ContractAOSChallengeManagerChallengeRespondedIterator, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "ChallengeResponded")
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerChallengeRespondedIterator{contract: _ContractAOSChallengeManager.contract, event: "ChallengeResponded", logs: logs, sub: sub}, nil
}

// WatchChallengeResponded is a free log subscription operation binding the contract event 0xf7d7a8300e553f25f8088b81b3f77823a57541922aa5fa92ca281944c37ed3d9.
//
// Solidity: event ChallengeResponded((uint32,uint256,bytes32) challengeResponse, (uint32) challengeResponseMetadata)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchChallengeResponded(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerChallengeResponded) (event.Subscription, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "ChallengeResponded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerChallengeResponded)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "ChallengeResponded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallengeResponded is a log parse operation binding the contract event 0xf7d7a8300e553f25f8088b81b3f77823a57541922aa5fa92ca281944c37ed3d9.
//
// Solidity: event ChallengeResponded((uint32,uint256,bytes32) challengeResponse, (uint32) challengeResponseMetadata)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParseChallengeResponded(log types.Log) (*ContractAOSChallengeManagerChallengeResponded, error) {
	event := new(ContractAOSChallengeManagerChallengeResponded)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "ChallengeResponded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAOSChallengeManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerInitializedIterator struct {
	Event *ContractAOSChallengeManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerInitialized represents a Initialized event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractAOSChallengeManagerInitializedIterator, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerInitializedIterator{contract: _ContractAOSChallengeManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerInitialized)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParseInitialized(log types.Log) (*ContractAOSChallengeManagerInitialized, error) {
	event := new(ContractAOSChallengeManagerInitialized)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAOSChallengeManagerNewChallengeCreatedIterator is returned from FilterNewChallengeCreated and is used to iterate over the raw logs and unpacked data for NewChallengeCreated events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerNewChallengeCreatedIterator struct {
	Event *ContractAOSChallengeManagerNewChallengeCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerNewChallengeCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerNewChallengeCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerNewChallengeCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerNewChallengeCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerNewChallengeCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerNewChallengeCreated represents a NewChallengeCreated event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerNewChallengeCreated struct {
	ChallengeIndex uint32
	Challenge      IAOSChallengeManagerChallenge
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterNewChallengeCreated is a free log retrieval operation binding the contract event 0xf670ca2cbb898c82f5de5f0697a7340ae1e089df3e85137eb65cc9794b2f1906.
//
// Solidity: event NewChallengeCreated(uint32 indexed challengeIndex, (uint256,bytes32,bytes,uint32,uint32,bytes) challenge)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterNewChallengeCreated(opts *bind.FilterOpts, challengeIndex []uint32) (*ContractAOSChallengeManagerNewChallengeCreatedIterator, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "NewChallengeCreated", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerNewChallengeCreatedIterator{contract: _ContractAOSChallengeManager.contract, event: "NewChallengeCreated", logs: logs, sub: sub}, nil
}

// WatchNewChallengeCreated is a free log subscription operation binding the contract event 0xf670ca2cbb898c82f5de5f0697a7340ae1e089df3e85137eb65cc9794b2f1906.
//
// Solidity: event NewChallengeCreated(uint32 indexed challengeIndex, (uint256,bytes32,bytes,uint32,uint32,bytes) challenge)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchNewChallengeCreated(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerNewChallengeCreated, challengeIndex []uint32) (event.Subscription, error) {

	var challengeIndexRule []interface{}
	for _, challengeIndexItem := range challengeIndex {
		challengeIndexRule = append(challengeIndexRule, challengeIndexItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "NewChallengeCreated", challengeIndexRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerNewChallengeCreated)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "NewChallengeCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewChallengeCreated is a log parse operation binding the contract event 0xf670ca2cbb898c82f5de5f0697a7340ae1e089df3e85137eb65cc9794b2f1906.
//
// Solidity: event NewChallengeCreated(uint32 indexed challengeIndex, (uint256,bytes32,bytes,uint32,uint32,bytes) challenge)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParseNewChallengeCreated(log types.Log) (*ContractAOSChallengeManagerNewChallengeCreated, error) {
	event := new(ContractAOSChallengeManagerNewChallengeCreated)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "NewChallengeCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAOSChallengeManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerOwnershipTransferredIterator struct {
	Event *ContractAOSChallengeManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractAOSChallengeManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerOwnershipTransferredIterator{contract: _ContractAOSChallengeManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerOwnershipTransferred)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractAOSChallengeManagerOwnershipTransferred, error) {
	event := new(ContractAOSChallengeManagerOwnershipTransferred)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAOSChallengeManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerPausedIterator struct {
	Event *ContractAOSChallengeManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerPaused represents a Paused event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractAOSChallengeManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerPausedIterator{contract: _ContractAOSChallengeManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerPaused)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParsePaused(log types.Log) (*ContractAOSChallengeManagerPaused, error) {
	event := new(ContractAOSChallengeManagerPaused)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAOSChallengeManagerPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerPauserRegistrySetIterator struct {
	Event *ContractAOSChallengeManagerPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerPauserRegistrySet represents a PauserRegistrySet event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractAOSChallengeManagerPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerPauserRegistrySetIterator{contract: _ContractAOSChallengeManager.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerPauserRegistrySet)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParsePauserRegistrySet(log types.Log) (*ContractAOSChallengeManagerPauserRegistrySet, error) {
	event := new(ContractAOSChallengeManagerPauserRegistrySet)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAOSChallengeManagerStaleStakesForbiddenUpdateIterator is returned from FilterStaleStakesForbiddenUpdate and is used to iterate over the raw logs and unpacked data for StaleStakesForbiddenUpdate events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerStaleStakesForbiddenUpdateIterator struct {
	Event *ContractAOSChallengeManagerStaleStakesForbiddenUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerStaleStakesForbiddenUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerStaleStakesForbiddenUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerStaleStakesForbiddenUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerStaleStakesForbiddenUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerStaleStakesForbiddenUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerStaleStakesForbiddenUpdate represents a StaleStakesForbiddenUpdate event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerStaleStakesForbiddenUpdate struct {
	Value bool
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterStaleStakesForbiddenUpdate is a free log retrieval operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterStaleStakesForbiddenUpdate(opts *bind.FilterOpts) (*ContractAOSChallengeManagerStaleStakesForbiddenUpdateIterator, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerStaleStakesForbiddenUpdateIterator{contract: _ContractAOSChallengeManager.contract, event: "StaleStakesForbiddenUpdate", logs: logs, sub: sub}, nil
}

// WatchStaleStakesForbiddenUpdate is a free log subscription operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchStaleStakesForbiddenUpdate(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerStaleStakesForbiddenUpdate) (event.Subscription, error) {

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "StaleStakesForbiddenUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerStaleStakesForbiddenUpdate)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaleStakesForbiddenUpdate is a log parse operation binding the contract event 0x40e4ed880a29e0f6ddce307457fb75cddf4feef7d3ecb0301bfdf4976a0e2dfc.
//
// Solidity: event StaleStakesForbiddenUpdate(bool value)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParseStaleStakesForbiddenUpdate(log types.Log) (*ContractAOSChallengeManagerStaleStakesForbiddenUpdate, error) {
	event := new(ContractAOSChallengeManagerStaleStakesForbiddenUpdate)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "StaleStakesForbiddenUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractAOSChallengeManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerUnpausedIterator struct {
	Event *ContractAOSChallengeManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractAOSChallengeManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractAOSChallengeManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractAOSChallengeManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractAOSChallengeManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractAOSChallengeManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractAOSChallengeManagerUnpaused represents a Unpaused event raised by the ContractAOSChallengeManager contract.
type ContractAOSChallengeManagerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractAOSChallengeManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractAOSChallengeManagerUnpausedIterator{contract: _ContractAOSChallengeManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractAOSChallengeManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractAOSChallengeManager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractAOSChallengeManagerUnpaused)
				if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractAOSChallengeManager *ContractAOSChallengeManagerFilterer) ParseUnpaused(log types.Log) (*ContractAOSChallengeManagerUnpaused, error) {
	event := new(ContractAOSChallengeManagerUnpaused)
	if err := _ContractAOSChallengeManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
